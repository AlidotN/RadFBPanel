// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using radFB.db;

namespace radFB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210525174028_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("radFB.db.postType", b =>
                {
                    b.Property<long>("PostTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnPostTypeTitle");

                    b.Property<string>("FaPostTypeTitle");

                    b.HasKey("PostTypeID");

                    b.ToTable("postType");
                });

            modelBuilder.Entity("radFB.db.Tbl_activeSesion", b =>
                {
                    b.Property<long>("activeSesionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("deviceCode");

                    b.Property<string>("deviceName");

                    b.Property<long>("fk_userID");

                    b.HasKey("activeSesionID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_activeSesion");
                });

            modelBuilder.Entity("radFB.db.Tbl_activities", b =>
                {
                    b.Property<long>("activityID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("avtivityTitle");

                    b.Property<long>("fk_userID");

                    b.HasKey("activityID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_activities");
                });

            modelBuilder.Entity("radFB.db.Tbl_AnswerToQuestion", b =>
                {
                    b.Property<long>("ParentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChildID");

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("RegisterDate");

                    b.Property<string>("RegisterTime");

                    b.Property<long>("fk_QuestiontID");

                    b.Property<long>("fk_UserID");

                    b.Property<string>("postDescription");

                    b.HasKey("ParentID");

                    b.HasIndex("ChildID");

                    b.HasIndex("fk_QuestiontID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_AnswerToQuestion");
                });

            modelBuilder.Entity("radFB.db.Tbl_awards", b =>
                {
                    b.Property<long>("awardsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("awardsTitle");

                    b.Property<long>("fk_userID");

                    b.HasKey("awardsID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_awards");
                });

            modelBuilder.Entity("radFB.db.Tbl_BlockedUsers", b =>
                {
                    b.Property<long>("BlockedUsersID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlockExplantion");

                    b.Property<long?>("Tbl_RadFBUsersRadFbUserID");

                    b.Property<long>("fk_BlockedUserID");

                    b.Property<long>("fk_BlockingUSerID");

                    b.HasKey("BlockedUsersID");

                    b.HasIndex("Tbl_RadFBUsersRadFbUserID");

                    b.HasIndex("fk_BlockedUserID");

                    b.HasIndex("fk_BlockingUSerID");

                    b.ToTable("Tbl_BlockedUsers");
                });

            modelBuilder.Entity("radFB.db.Tbl_calender", b =>
                {
                    b.Property<long>("calenderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("calenderEndDate");

                    b.Property<string>("calenderStartDate");

                    b.Property<string>("calenderTitle");

                    b.Property<long>("fk_userID");

                    b.HasKey("calenderID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_calender");
                });

            modelBuilder.Entity("radFB.db.Tbl_CommentLike", b =>
                {
                    b.Property<long>("CommentLikeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_AnswerToQuestionID");

                    b.Property<long>("fk_UserID");

                    b.HasKey("CommentLikeID");

                    b.HasIndex("fk_AnswerToQuestionID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_CommentLike");
                });

            modelBuilder.Entity("radFB.db.Tbl_CooperationType", b =>
                {
                    b.Property<int>("CooperationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnCooperationName");

                    b.Property<string>("PrCooperationName");

                    b.HasKey("CooperationID");

                    b.ToTable("Tbl_CooperationType");
                });

            modelBuilder.Entity("radFB.db.Tbl_countries", b =>
                {
                    b.Property<int>("countryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("countryName");

                    b.HasKey("countryID");

                    b.ToTable("Tbl_countries");
                });

            modelBuilder.Entity("radFB.db.Tbl_criticsAndSuggestions", b =>
                {
                    b.Property<long>("criticsAndSuggestionsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Confirmation");

                    b.Property<bool>("DeleteStatus");

                    b.Property<int>("RegisterDate");

                    b.Property<long>("fk_senderUserID");

                    b.Property<string>("txtMessage");

                    b.HasKey("criticsAndSuggestionsID");

                    b.HasIndex("fk_senderUserID");

                    b.ToTable("Tbl_criticsAndSuggestions");
                });

            modelBuilder.Entity("radFB.db.Tbl_DeclarationOfReadiness", b =>
                {
                    b.Property<long>("DeclarationOfReadinessID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_questionnaireID");

                    b.Property<long>("fk_volunteerUserID");

                    b.HasKey("DeclarationOfReadinessID");

                    b.HasIndex("fk_questionnaireID");

                    b.HasIndex("fk_volunteerUserID");

                    b.ToTable("Tbl_DeclarationOfReadiness");
                });

            modelBuilder.Entity("radFB.db.Tbl_dialog", b =>
                {
                    b.Property<long>("notificationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("enNotificationText");

                    b.Property<string>("enNotificationTitle");

                    b.Property<string>("prNotificationText");

                    b.Property<string>("prnotificationTitle");

                    b.HasKey("notificationID");

                    b.ToTable("Tbl_dialog");
                });

            modelBuilder.Entity("radFB.db.Tbl_discount", b =>
                {
                    b.Property<long>("discountID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<int>("discountPercent");

                    b.Property<string>("discountTitle");

                    b.Property<string>("endDate");

                    b.Property<string>("startDate");

                    b.HasKey("discountID");

                    b.ToTable("Tbl_discount");
                });

            modelBuilder.Entity("radFB.db.Tbl_EmploymentAdvApply", b =>
                {
                    b.Property<long>("EmploymentAdvApplyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_ApplicantUserID");

                    b.Property<long>("fk_postID");

                    b.HasKey("EmploymentAdvApplyID");

                    b.HasIndex("fk_ApplicantUserID");

                    b.HasIndex("fk_postID");

                    b.ToTable("Tbl_EmploymentAdvApply");
                });

            modelBuilder.Entity("radFB.db.Tbl_EmploymentAdvPost", b =>
                {
                    b.Property<long>("EmploymentAdvPostID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<bool>("EdvType");

                    b.Property<string>("SkillsReqired");

                    b.Property<string>("WorkExprience");

                    b.Property<int>("fk_CooperationTypeID");

                    b.Property<long>("fk_PostID");

                    b.Property<int>("fk_countryID");

                    b.Property<int>("fk_genderID");

                    b.Property<long>("fk_grageID");

                    b.Property<long>("fk_jobCategoryID");

                    b.Property<long>("fk_mssID");

                    b.Property<long>("fk_provinceID");

                    b.Property<string>("salary");

                    b.HasKey("EmploymentAdvPostID");

                    b.HasIndex("fk_CooperationTypeID");

                    b.HasIndex("fk_PostID");

                    b.HasIndex("fk_countryID");

                    b.HasIndex("fk_genderID");

                    b.HasIndex("fk_grageID");

                    b.HasIndex("fk_jobCategoryID");

                    b.HasIndex("fk_mssID");

                    b.ToTable("Tbl_EmploymentAdvPost");
                });

            modelBuilder.Entity("radFB.db.Tbl_factor", b =>
                {
                    b.Property<long>("factorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Authority");

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("Email");

                    b.Property<string>("TrackingCode");

                    b.Property<string>("description");

                    b.Property<long>("fk_payID");

                    b.Property<string>("phoneNumber");

                    b.Property<long>("price");

                    b.Property<int>("status");

                    b.HasKey("factorID");

                    b.HasIndex("fk_payID");

                    b.ToTable("Tbl_factor");
                });

            modelBuilder.Entity("radFB.db.Tbl_followers", b =>
                {
                    b.Property<long>("followersID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_UserID");

                    b.Property<long>("fk_followerUSerID");

                    b.Property<bool>("seePostsAllow");

                    b.HasKey("followersID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_followerUSerID");

                    b.ToTable("Tbl_followers");
                });

            modelBuilder.Entity("radFB.db.Tbl_FrequentlyAskedQuestions", b =>
                {
                    b.Property<long>("FrequentlyAskedQuestionsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("EnAnswer");

                    b.Property<string>("EnQuestion");

                    b.Property<long?>("fk_SubjectID");

                    b.Property<string>("prAnswer");

                    b.Property<string>("prQuestion");

                    b.Property<int>("status");

                    b.HasKey("FrequentlyAskedQuestionsID");

                    b.HasIndex("fk_SubjectID")
                        .IsUnique()
                        .HasFilter("[fk_SubjectID] IS NOT NULL");

                    b.ToTable("Tbl_FrequentlyAskedQuestions");
                });

            modelBuilder.Entity("radFB.db.Tbl_FrequentlyAskedQuestionsSubject", b =>
                {
                    b.Property<long>("FrequentlyAskedQuestionsSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("EnTitle");

                    b.Property<string>("FaTitle");

                    b.HasKey("FrequentlyAskedQuestionsSubjectID");

                    b.ToTable("Tbl_FrequentlyAskedQuestionsSubject");
                });

            modelBuilder.Entity("radFB.db.Tbl_gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnGenderTitle");

                    b.Property<string>("PrGenderTitle");

                    b.HasKey("GenderID");

                    b.ToTable("Tbl_gender");
                });

            modelBuilder.Entity("radFB.db.Tbl_grade", b =>
                {
                    b.Property<long>("gradeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("EnGradeTitle");

                    b.Property<string>("PrGradeTitle");

                    b.HasKey("gradeID");

                    b.ToTable("Tbl_grade");
                });

            modelBuilder.Entity("radFB.db.Tbl_group", b =>
                {
                    b.Property<long>("groupID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("description");

                    b.Property<long>("fk_creatorUserID");

                    b.Property<string>("groupTitle");

                    b.HasKey("groupID");

                    b.HasIndex("fk_creatorUserID");

                    b.ToTable("Tbl_group");
                });

            modelBuilder.Entity("radFB.db.Tbl_groupException", b =>
                {
                    b.Property<long>("groupExceptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_ExecptionGroupID");

                    b.Property<long>("fk_userID");

                    b.HasKey("groupExceptionID");

                    b.HasIndex("fk_ExecptionGroupID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_groupException");
                });

            modelBuilder.Entity("radFB.db.Tbl_groupMessages", b =>
                {
                    b.Property<long>("groupMessagesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_groupID");

                    b.Property<long>("fk_messageTypeID");

                    b.Property<long>("fk_senderUserID");

                    b.Property<int>("groupMessageDate");

                    b.Property<bool>("groupMessageIsSeen");

                    b.Property<string>("groupMessagePicture");

                    b.Property<string>("groupMessageText");

                    b.Property<string>("groupMessageTime");

                    b.Property<string>("groupMessageVoice");

                    b.HasKey("groupMessagesID");

                    b.HasIndex("fk_groupID");

                    b.HasIndex("fk_messageTypeID");

                    b.HasIndex("fk_senderUserID");

                    b.ToTable("Tbl_groupMessages");
                });

            modelBuilder.Entity("radFB.db.Tbl_guild", b =>
                {
                    b.Property<long>("guildID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("EnguildNAme");

                    b.Property<string>("FAguildNAme");

                    b.Property<int>("guildColor");

                    b.HasKey("guildID");

                    b.ToTable("Tbl_guild");
                });

            modelBuilder.Entity("radFB.db.Tbl_Introduction", b =>
                {
                    b.Property<long>("IntroductionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("EnPic");

                    b.Property<string>("EnText");

                    b.Property<string>("FaPic");

                    b.Property<string>("FaText");

                    b.HasKey("IntroductionID");

                    b.ToTable("Tbl_Introduction");
                });

            modelBuilder.Entity("radFB.db.Tbl_jobCategory", b =>
                {
                    b.Property<long>("jobCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnJobCategoryTitle");

                    b.Property<string>("PrJobCategoryTitle");

                    b.Property<long>("fk_guildID");

                    b.HasKey("jobCategoryID");

                    b.HasIndex("fk_guildID");

                    b.ToTable("Tbl_jobCategory");
                });

            modelBuilder.Entity("radFB.db.Tbl_jobStatus", b =>
                {
                    b.Property<long>("jobStatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnJobStatusTitle");

                    b.Property<string>("PrJobStatusTitle");

                    b.HasKey("jobStatusID");

                    b.ToTable("Tbl_jobStatus");
                });

            modelBuilder.Entity("radFB.db.Tbl_keyWords", b =>
                {
                    b.Property<long>("keyWordID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_postID");

                    b.Property<string>("keyWord");

                    b.HasKey("keyWordID");

                    b.HasIndex("fk_postID");

                    b.ToTable("Tbl_keyWords");
                });

            modelBuilder.Entity("radFB.db.Tbl_legalClient", b =>
                {
                    b.Property<long>("legalClientID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CEOName");

                    b.Property<string>("DateOfEstablishment");

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("RegisterNumber");

                    b.Property<string>("aboutCompany");

                    b.Property<string>("companyName");

                    b.Property<string>("companyType");

                    b.Property<long>("fk_UserID");

                    b.Property<string>("membersCount");

                    b.Property<string>("natioalCode");

                    b.HasKey("legalClientID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_legalClient");
                });

            modelBuilder.Entity("radFB.db.Tbl_Logins", b =>
                {
                    b.Property<long>("LoginID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("deviceCode");

                    b.Property<long>("fk_userID");

                    b.Property<string>("loginDate");

                    b.Property<string>("loginTime");

                    b.HasKey("LoginID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_Logins");
                });

            modelBuilder.Entity("radFB.db.Tbl_major", b =>
                {
                    b.Property<long>("majorID");

                    b.Property<string>("EnMajorTitle")
                        .HasMaxLength(50);

                    b.Property<string>("PrMajorTitle")
                        .HasMaxLength(50);

                    b.HasKey("majorID");

                    b.ToTable("Tbl_major");
                });

            modelBuilder.Entity("radFB.db.Tbl_memberOfGroup", b =>
                {
                    b.Property<long>("memberOfGroupID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_UserID");

                    b.Property<long>("fk_groupID");

                    b.HasKey("memberOfGroupID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_groupID");

                    b.ToTable("Tbl_memberOfGroup");
                });

            modelBuilder.Entity("radFB.db.Tbl_messages", b =>
                {
                    b.Property<long>("messageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("MessagePicture");

                    b.Property<string>("MessageTime");

                    b.Property<string>("MessageVoice");

                    b.Property<long>("fk_ReciverUserID");

                    b.Property<long>("fk_messageTypeID");

                    b.Property<long>("fk_senderUserID");

                    b.Property<string>("messageDate");

                    b.Property<bool>("messageIsSeen");

                    b.Property<string>("messageText");

                    b.HasKey("messageID");

                    b.HasIndex("fk_ReciverUserID");

                    b.HasIndex("fk_messageTypeID");

                    b.HasIndex("fk_senderUserID");

                    b.ToTable("Tbl_messages");
                });

            modelBuilder.Entity("radFB.db.Tbl_messagesException", b =>
                {
                    b.Property<long>("messagesExceptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_ExecptionUserID");

                    b.Property<long>("fk_userID");

                    b.HasKey("messagesExceptionID");

                    b.HasIndex("fk_ExecptionUserID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_messagesException");
                });

            modelBuilder.Entity("radFB.db.Tbl_messageType", b =>
                {
                    b.Property<long>("messageTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("messageTypeTitle");

                    b.HasKey("messageTypeID");

                    b.ToTable("Tbl_messageType");
                });

            modelBuilder.Entity("radFB.db.Tbl_militaryServiceSituation", b =>
                {
                    b.Property<long>("mssID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("enMSS");

                    b.Property<string>("prMSS");

                    b.HasKey("mssID");

                    b.ToTable("Tbl_militaryServiceSituation");
                });

            modelBuilder.Entity("radFB.db.Tbl_muteGroupMessage", b =>
                {
                    b.Property<long>("muteGroupMessageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_UserID");

                    b.Property<long>("fk_groupID");

                    b.Property<bool>("messageStatus");

                    b.HasKey("muteGroupMessageID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_groupID");

                    b.ToTable("Tbl_muteGroupMessage");
                });

            modelBuilder.Entity("radFB.db.Tbl_muteMessages", b =>
                {
                    b.Property<long>("muteMessagesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("fk_ReciverUserID");

                    b.Property<long?>("fk_senderUserID");

                    b.Property<bool>("messageStatus");

                    b.HasKey("muteMessagesID");

                    b.HasIndex("fk_ReciverUserID")
                        .IsUnique()
                        .HasFilter("[fk_ReciverUserID] IS NOT NULL");

                    b.HasIndex("fk_senderUserID");

                    b.ToTable("Tbl_muteMessages");
                });

            modelBuilder.Entity("radFB.db.Tbl_MuteUsers", b =>
                {
                    b.Property<long>("MuteUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_MutedUserID");

                    b.Property<long>("fk_UserID");

                    b.HasKey("MuteUserID");

                    b.HasIndex("fk_MutedUserID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_MuteUsers");
                });

            modelBuilder.Entity("radFB.db.Tbl_notifications", b =>
                {
                    b.Property<long>("notificationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdvNotification");

                    b.Property<string>("AdvNotificationRing");

                    b.Property<bool>("MessageNotification");

                    b.Property<string>("MessageNotificationRing");

                    b.Property<bool>("QuestionNotification");

                    b.Property<string>("appNotificationRing");

                    b.Property<bool>("appVibration");

                    b.Property<long>("fk_userID");

                    b.Property<bool>("groupNotification");

                    b.Property<string>("groupNotificationRing");

                    b.Property<bool>("notification");

                    b.Property<bool>("postNotification");

                    b.Property<string>("postNotificationRing");

                    b.Property<string>("questionNotificationRing");

                    b.HasKey("notificationID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_notifications");
                });

            modelBuilder.Entity("radFB.db.Tbl_packageOptions", b =>
                {
                    b.Property<long>("packageOptionsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_permiumPackageID");

                    b.Property<long>("fk_settingID");

                    b.HasKey("packageOptionsID");

                    b.HasIndex("fk_permiumPackageID");

                    b.HasIndex("fk_settingID");

                    b.ToTable("Tbl_packageOptions");
                });

            modelBuilder.Entity("radFB.db.Tbl_pay", b =>
                {
                    b.Property<long>("payID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_permiumPackageID");

                    b.Property<long>("fk_userID");

                    b.Property<long>("price");

                    b.HasKey("payID");

                    b.HasIndex("fk_permiumPackageID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_pay");
                });

            modelBuilder.Entity("radFB.db.Tbl_permiumPackage", b =>
                {
                    b.Property<long>("permiumPackageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("permiumPackageTitle");

                    b.Property<string>("price");

                    b.Property<string>("time");

                    b.HasKey("permiumPackageID");

                    b.ToTable("Tbl_permiumPackage");
                });

            modelBuilder.Entity("radFB.db.Tbl_points", b =>
                {
                    b.Property<long>("pointID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("pointTitle");

                    b.Property<int>("pointValue");

                    b.HasKey("pointID");

                    b.ToTable("Tbl_points");
                });

            modelBuilder.Entity("radFB.db.Tbl_pointsDetail", b =>
                {
                    b.Property<long>("pointsDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_pointID");

                    b.Property<long>("fk_userID");

                    b.Property<string>("pointDetailDate");

                    b.Property<string>("pointSubDate");

                    b.Property<long>("subPoint");

                    b.Property<long>("sumPoint");

                    b.HasKey("pointsDetailID");

                    b.HasIndex("fk_pointID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_pointsDetail");
                });

            modelBuilder.Entity("radFB.db.Tbl_post", b =>
                {
                    b.Property<long>("postID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeleteDate");

                    b.Property<bool>("DeleteStatus");

                    b.Property<bool>("PostConfrimStatus");

                    b.Property<string>("RegisterDate");

                    b.Property<long>("fk_PostTypeID");

                    b.Property<long>("fk_UserID");

                    b.Property<string>("postDescription");

                    b.Property<string>("postTitle");

                    b.HasKey("postID");

                    b.HasIndex("fk_PostTypeID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_post");
                });

            modelBuilder.Entity("radFB.db.Tbl_postChanged", b =>
                {
                    b.Property<long>("postChangedID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_userID");

                    b.Property<string>("postChangedDate");

                    b.Property<string>("postChangedExplain");

                    b.Property<string>("postChangedPic");

                    b.Property<bool>("postChangedStatus");

                    b.Property<string>("postChangedTime");

                    b.HasKey("postChangedID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_postChanged");
                });

            modelBuilder.Entity("radFB.db.Tbl_postChangedException", b =>
                {
                    b.Property<long>("postChangedExceptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_ExecptionUserID");

                    b.Property<long>("fk_userID");

                    b.HasKey("postChangedExceptionID");

                    b.HasIndex("fk_ExecptionUserID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_postChangedException");
                });

            modelBuilder.Entity("radFB.db.Tbl_poster", b =>
                {
                    b.Property<long>("posterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<bool>("OnlineOflineStatus");

                    b.Property<int>("PosterCapacity");

                    b.Property<string>("daysOfWeek");

                    b.Property<int>("fk_countryID");

                    b.Property<int>("fk_genderID");

                    b.Property<long>("fk_posterTemplateID");

                    b.Property<string>("posterAddress");

                    b.Property<string>("posterCity");

                    b.Property<string>("posterContacts");

                    b.Property<string>("posterCoust");

                    b.Property<string>("posterDegree");

                    b.Property<string>("posterEndDate");

                    b.Property<string>("posterOtherThings");

                    b.Property<string>("posterPhoneNumber");

                    b.Property<string>("posterPrerequisites");

                    b.Property<string>("posterStartDate");

                    b.Property<string>("posterSubject");

                    b.Property<string>("posterTitle");

                    b.Property<string>("posterType");

                    b.Property<string>("timesOfDay");

                    b.HasKey("posterID");

                    b.HasIndex("fk_countryID");

                    b.HasIndex("fk_genderID");

                    b.HasIndex("fk_posterTemplateID");

                    b.ToTable("Tbl_poster");
                });

            modelBuilder.Entity("radFB.db.Tbl_posterFilter", b =>
                {
                    b.Property<long>("posterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<bool>("OnlineOflineStatus");

                    b.Property<int>("PosterCapacity");

                    b.Property<int>("fk_countryID");

                    b.Property<int>("fk_genderID");

                    b.Property<string>("posterAddress");

                    b.Property<string>("posterCity");

                    b.Property<string>("posterContacts");

                    b.Property<string>("posterCoust");

                    b.Property<string>("posterDegree");

                    b.Property<string>("posterEndDate");

                    b.Property<string>("posterOtherThings");

                    b.Property<string>("posterPrerequisites");

                    b.Property<string>("posterStartDate");

                    b.Property<string>("posterSubject");

                    b.Property<string>("posterTitle");

                    b.Property<string>("posterType");

                    b.HasKey("posterID");

                    b.HasIndex("fk_countryID");

                    b.HasIndex("fk_genderID");

                    b.ToTable("Tbl_posterFilter");
                });

            modelBuilder.Entity("radFB.db.Tbl_posterTemplate", b =>
                {
                    b.Property<long>("posterTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("posterDescription");

                    b.Property<string>("posterFileAddress");

                    b.Property<string>("posterName");

                    b.HasKey("posterTemplateID");

                    b.ToTable("Tbl_posterTemplate");
                });

            modelBuilder.Entity("radFB.db.Tbl_PostFile", b =>
                {
                    b.Property<long>("postFileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("FileAddress");

                    b.Property<long>("fk_postID");

                    b.Property<string>("picAddress");

                    b.HasKey("postFileID");

                    b.HasIndex("fk_postID");

                    b.ToTable("Tbl_PostFile");
                });

            modelBuilder.Entity("radFB.db.Tbl_PostForward", b =>
                {
                    b.Property<long>("PostForwardID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_ForwardedUserID");

                    b.Property<long>("fk_ForwardingUserID");

                    b.Property<long>("fk_PostID");

                    b.HasKey("PostForwardID");

                    b.HasIndex("fk_ForwardedUserID");

                    b.HasIndex("fk_ForwardingUserID");

                    b.HasIndex("fk_PostID");

                    b.ToTable("Tbl_PostForward");
                });

            modelBuilder.Entity("radFB.db.Tbl_PostLike", b =>
                {
                    b.Property<long>("PostLikeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_PostID");

                    b.Property<long>("fk_UserID");

                    b.HasKey("PostLikeID");

                    b.HasIndex("fk_PostID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_PostLike");
                });

            modelBuilder.Entity("radFB.db.Tbl_privacy", b =>
                {
                    b.Property<long>("privacyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("LastSeen");

                    b.Property<bool>("QuestionAnswer");

                    b.Property<bool>("addToGroup");

                    b.Property<long>("fk_userID");

                    b.Property<bool>("mention");

                    b.Property<bool>("privateMode");

                    b.Property<bool>("profilePhoto");

                    b.HasKey("privacyID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_privacy");
                });

            modelBuilder.Entity("radFB.db.Tbl_province", b =>
                {
                    b.Property<long>("provinceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("fk_countryID");

                    b.Property<string>("provinceName");

                    b.HasKey("provinceID");

                    b.HasIndex("fk_countryID");

                    b.ToTable("Tbl_province");
                });

            modelBuilder.Entity("radFB.db.Tbl_Question", b =>
                {
                    b.Property<long>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("QuestionTitle");

                    b.Property<long>("fk_JobCategoryID");

                    b.Property<long>("fk_UserID");

                    b.Property<long>("fk_postID");

                    b.HasKey("QuestionID");

                    b.HasIndex("fk_JobCategoryID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_postID");

                    b.ToTable("Tbl_Question");
                });

            modelBuilder.Entity("radFB.db.Tbl_questionFilter", b =>
                {
                    b.Property<long>("questionFilterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("alert");

                    b.Property<long>("fk_JobCategoryID");

                    b.Property<long>("fk_subjectID");

                    b.Property<long>("fk_userID");

                    b.Property<bool>("questionFilterStatus");

                    b.HasKey("questionFilterID");

                    b.HasIndex("fk_JobCategoryID");

                    b.HasIndex("fk_subjectID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_questionFilter");
                });

            modelBuilder.Entity("radFB.db.Tbl_questionnaire", b =>
                {
                    b.Property<long>("questionnaireID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_ApplicantUserID");

                    b.Property<long>("fk_JobCategoryID");

                    b.Property<int>("fk_genderID");

                    b.Property<long>("fk_postID");

                    b.Property<string>("questionnaireTitle");

                    b.HasKey("questionnaireID");

                    b.HasIndex("fk_ApplicantUserID");

                    b.HasIndex("fk_JobCategoryID");

                    b.HasIndex("fk_genderID");

                    b.HasIndex("fk_postID");

                    b.ToTable("Tbl_questionnaire");
                });

            modelBuilder.Entity("radFB.db.Tbl_questionnaireFilter", b =>
                {
                    b.Property<long>("questionnaireFilterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Status");

                    b.Property<string>("benefits");

                    b.Property<long>("fk_subjectID");

                    b.Property<long>("fk_userID");

                    b.HasKey("questionnaireFilterID");

                    b.HasIndex("fk_subjectID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_questionnaireFilter");
                });

            modelBuilder.Entity("radFB.db.Tbl_RadFBUsers", b =>
                {
                    b.Property<long>("RadFbUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Password");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RegisterDate");

                    b.Property<string>("UserAddress");

                    b.Property<string>("UserPic");

                    b.Property<string>("UserWebsite");

                    b.Property<string>("city");

                    b.Property<string>("email");

                    b.Property<int>("fk_countryID");

                    b.Property<long>("fk_jobCategoryID");

                    b.Property<long>("fk_provinceID");

                    b.Property<int>("fk_userTypeID");

                    b.Property<int>("interdusedEmail");

                    b.Property<string>("lastSeenDate");

                    b.Property<string>("phoneNumber");

                    b.Property<string>("userName");

                    b.Property<string>("userStatus");

                    b.HasKey("RadFbUserID");

                    b.HasIndex("fk_countryID");

                    b.HasIndex("fk_jobCategoryID");

                    b.HasIndex("fk_userTypeID");

                    b.ToTable("Tbl_RadFBUsers");
                });

            modelBuilder.Entity("radFB.db.Tbl_RealCient", b =>
                {
                    b.Property<long>("RealClientID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("aboutMe");

                    b.Property<bool>("companyDesire");

                    b.Property<int>("fk_CooperationID");

                    b.Property<int>("fk_GenderID");

                    b.Property<long>("fk_UserID");

                    b.Property<long>("fk_mssID");

                    b.Property<string>("suggestSAlary");

                    b.HasKey("RealClientID");

                    b.HasIndex("fk_CooperationID");

                    b.HasIndex("fk_GenderID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_mssID");

                    b.ToTable("Tbl_RealCient");
                });

            modelBuilder.Entity("radFB.db.Tbl_reportUsers", b =>
                {
                    b.Property<long>("reportUsersID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_ReportedUserID");

                    b.Property<long>("fk_ReportingUSerID");

                    b.Property<bool>("isChecked");

                    b.HasKey("reportUsersID");

                    b.HasIndex("fk_ReportedUserID");

                    b.HasIndex("fk_ReportingUSerID");

                    b.ToTable("Tbl_reportUsers");
                });

            modelBuilder.Entity("radFB.db.Tbl_savedQuestion", b =>
                {
                    b.Property<long>("savedQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_QuestionID");

                    b.Property<long>("fk_userID");

                    b.Property<bool>("pin");

                    b.HasKey("savedQuestionID");

                    b.HasIndex("fk_QuestionID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_savedQuestion");
                });

            modelBuilder.Entity("radFB.db.Tbl_savedQuestionnaire", b =>
                {
                    b.Property<long>("savedQuestionnaireID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_QuestionnaireID");

                    b.Property<long>("fk_userID");

                    b.Property<bool>("pin");

                    b.HasKey("savedQuestionnaireID");

                    b.HasIndex("fk_QuestionnaireID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_savedQuestionnaire");
                });

            modelBuilder.Entity("radFB.db.Tbl_savedTopics", b =>
                {
                    b.Property<long>("savedTopicsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("PinStatus");

                    b.Property<bool>("ShowOrHide");

                    b.Property<long>("fk_subjectID");

                    b.Property<long>("fk_userID");

                    b.Property<bool>("questionOrQuestionnaire");

                    b.Property<bool>("savedTopicStatus");

                    b.HasKey("savedTopicsID");

                    b.HasIndex("fk_subjectID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_savedTopics");
                });

            modelBuilder.Entity("radFB.db.Tbl_setting", b =>
                {
                    b.Property<long>("settingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("enSettingTitle");

                    b.Property<string>("prSettingTitle");

                    b.HasKey("settingID");

                    b.ToTable("Tbl_setting");
                });

            modelBuilder.Entity("radFB.db.Tbl_silentUsers", b =>
                {
                    b.Property<long>("silentUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_silentUSerID");

                    b.Property<long>("fk_userID");

                    b.HasKey("silentUserID");

                    b.HasIndex("fk_silentUSerID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_silentUsers");
                });

            modelBuilder.Entity("radFB.db.Tbl_siteSetting", b =>
                {
                    b.Property<int>("siteSettingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DescriptionAllowedCharacterCount");

                    b.Property<string>("Email");

                    b.Property<string>("EnDemo");

                    b.Property<string>("PrAboutUS");

                    b.Property<string>("PrDemo");

                    b.Property<string>("PrRules");

                    b.Property<string>("TelegramID");

                    b.Property<int>("TitleAllowedCharacterCount");

                    b.Property<string>("WhatsAppPhoneNumber");

                    b.Property<int>("allowedBlock");

                    b.Property<string>("enAboutUS");

                    b.Property<string>("enRules");

                    b.Property<int>("groupsMemberCount");

                    b.Property<string>("instagramID");

                    b.Property<string>("phoneNumbers");

                    b.Property<string>("postsShowTime");

                    b.HasKey("siteSettingID");

                    b.ToTable("Tbl_siteSetting");
                });

            modelBuilder.Entity("radFB.db.Tbl_Skills", b =>
                {
                    b.Property<long>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnSkillTitle");

                    b.Property<string>("PrSkillTitle");

                    b.HasKey("SkillID");

                    b.ToTable("Tbl_Skills");
                });

            modelBuilder.Entity("radFB.db.Tbl_story", b =>
                {
                    b.Property<long>("storyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MyProperty");

                    b.Property<long>("fk_userID");

                    b.Property<string>("storyPicture");

                    b.Property<string>("storySong");

                    b.Property<bool>("storyStatus");

                    b.Property<string>("storyTime");

                    b.Property<string>("stroryDate");

                    b.HasKey("storyID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_story");
                });

            modelBuilder.Entity("radFB.db.Tbl_storySeen", b =>
                {
                    b.Property<long>("storySeenID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_storyID");

                    b.Property<long>("fk_userID");

                    b.HasKey("storySeenID");

                    b.HasIndex("fk_storyID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_storySeen");
                });

            modelBuilder.Entity("radFB.db.Tbl_subject", b =>
                {
                    b.Property<long>("subjectID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnTitle");

                    b.Property<string>("FaTitle");

                    b.HasKey("subjectID");

                    b.ToTable("Tbl_subject");
                });

            modelBuilder.Entity("radFB.db.Tbl_SuggestionUsers", b =>
                {
                    b.Property<long>("SuggestionUsersID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_SuggestedUSerID");

                    b.Property<long>("fk_UserID");

                    b.HasKey("SuggestionUsersID");

                    b.HasIndex("fk_SuggestedUSerID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_SuggestionUsers");
                });

            modelBuilder.Entity("radFB.db.Tbl_UnauthorizedWords", b =>
                {
                    b.Property<long>("UnauthorizedWordsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("enWord");

                    b.Property<string>("fk_ApplicationUser");

                    b.Property<string>("prWord");

                    b.Property<string>("registerDate");

                    b.HasKey("UnauthorizedWordsID");

                    b.ToTable("Tbl_UnauthorizedWords");
                });

            modelBuilder.Entity("radFB.db.Tbl_userAccess", b =>
                {
                    b.Property<int>("userAccessID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("UnauthorizedWords");

                    b.Property<bool>("adv");

                    b.Property<bool>("criticsAndSuggestions");

                    b.Property<bool>("deleteInformation");

                    b.Property<bool>("financialDepartment");

                    b.Property<bool>("permiumPackage");

                    b.Property<bool>("posts");

                    b.Property<bool>("questions");

                    b.Property<bool>("reports");

                    b.Property<bool>("setting");

                    b.Property<bool>("userAccessMenu");

                    b.Property<string>("userAccessTitle");

                    b.Property<bool>("users");

                    b.Property<bool>("usersAdminPanel");

                    b.HasKey("userAccessID");

                    b.ToTable("Tbl_userAccess");
                });

            modelBuilder.Entity("radFB.db.Tbl_userBackGroundSetting", b =>
                {
                    b.Property<long>("userBackGroundSettingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_userID");

                    b.Property<string>("pic");

                    b.HasKey("userBackGroundSettingID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_userBackGroundSetting");
                });

            modelBuilder.Entity("radFB.db.Tbl_userDiscount", b =>
                {
                    b.Property<long>("userDiscountID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_discountID");

                    b.Property<long>("fk_userID");

                    b.HasKey("userDiscountID");

                    b.HasIndex("fk_discountID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_userDiscount");
                });

            modelBuilder.Entity("radFB.db.Tbl_UserEducationalBackground", b =>
                {
                    b.Property<long>("UserEduBackID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("FromDate");

                    b.Property<string>("InstituteName");

                    b.Property<string>("UpToDate");

                    b.Property<long>("fk_UserID");

                    b.Property<long>("fk_gradeID");

                    b.Property<long>("fk_majorID");

                    b.HasKey("UserEduBackID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_gradeID");

                    b.HasIndex("fk_majorID");

                    b.ToTable("Tbl_UserEducationalBackground");
                });

            modelBuilder.Entity("radFB.db.Tbl_UserFavorites", b =>
                {
                    b.Property<long>("UserFavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_UserID");

                    b.Property<string>("title");

                    b.HasKey("UserFavoriteID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_UserFavorites");
                });

            modelBuilder.Entity("radFB.db.Tbl_UserJobStatus", b =>
                {
                    b.Property<long>("UserJobStatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_JobStatusID");

                    b.Property<long>("fk_UserID");

                    b.HasKey("UserJobStatusID");

                    b.HasIndex("fk_JobStatusID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_UserJobStatus");
                });

            modelBuilder.Entity("radFB.db.Tbl_UserRegistrationCourses", b =>
                {
                    b.Property<long>("UserRegistrationCoursesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<bool>("UserRegistrationStatus");

                    b.Property<long>("fk_RegisteredUserID");

                    b.Property<long>("fk_posterID");

                    b.HasKey("UserRegistrationCoursesID");

                    b.HasIndex("fk_RegisteredUserID");

                    b.HasIndex("fk_posterID");

                    b.ToTable("Tbl_UserRegistrationCourses");
                });

            modelBuilder.Entity("radFB.db.Tbl_userSetting", b =>
                {
                    b.Property<long>("userSettingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_settingID");

                    b.Property<long>("fk_userID");

                    b.Property<bool>("settingStatus");

                    b.HasKey("userSettingID");

                    b.HasIndex("fk_settingID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_userSetting");
                });

            modelBuilder.Entity("radFB.db.Tbl_usersQuestions", b =>
                {
                    b.Property<long>("usersQuestionsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("QuestionAnswerDate");

                    b.Property<string>("QuestionAnswerText");

                    b.Property<string>("QuestionAnswerTime");

                    b.Property<int>("answerPoint");

                    b.Property<long>("fk_userID");

                    b.Property<string>("usersQuestionDate");

                    b.Property<string>("usersQuestionTime");

                    b.Property<string>("usersQuestionsText");

                    b.HasKey("usersQuestionsID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_usersQuestions");
                });

            modelBuilder.Entity("radFB.db.Tbl_usersSearchs", b =>
                {
                    b.Property<long>("userSearchID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("SearchedTitle");

                    b.Property<long>("fk_userID");

                    b.HasKey("userSearchID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_usersSearchs");
                });

            modelBuilder.Entity("radFB.db.Tbl_UsersSkills", b =>
                {
                    b.Property<long>("UsersSkillsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_SkillID");

                    b.Property<long>("fk_UserID");

                    b.HasKey("UsersSkillsID");

                    b.HasIndex("fk_SkillID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_UsersSkills");
                });

            modelBuilder.Entity("radFB.db.Tbl_userType", b =>
                {
                    b.Property<int>("userTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnUserTypeName");

                    b.Property<string>("PrUserTypeName");

                    b.HasKey("userTypeID");

                    b.ToTable("Tbl_userType");
                });

            modelBuilder.Entity("radFB.db.Tbl_UserWorkExperience", b =>
                {
                    b.Property<long>("UserEduBackID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("FromDate");

                    b.Property<string>("InstituteName");

                    b.Property<string>("UpToDate");

                    b.Property<string>("companyLogo");

                    b.Property<string>("description");

                    b.Property<long>("fk_UserID");

                    b.Property<string>("post");

                    b.HasKey("UserEduBackID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_UserWorkExperience");
                });

            modelBuilder.Entity("radFB.db.Tbl_UserWorkExperienceStamp", b =>
                {
                    b.Property<long>("UserWorkExperienceStampID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<long>("fk_UserID");

                    b.Property<long>("fk_UserWorkExperienceID");

                    b.Property<long>("fk_stampedUSerID");

                    b.HasKey("UserWorkExperienceStampID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_UserWorkExperienceID");

                    b.HasIndex("fk_stampedUSerID");

                    b.ToTable("Tbl_UserWorkExperienceStamp");
                });

            modelBuilder.Entity("radFB.db.Tbl_VisitedPosts", b =>
                {
                    b.Property<long>("VisitedPostsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fk_PostID");

                    b.Property<long>("fk_UserID");

                    b.HasKey("VisitedPostsID");

                    b.HasIndex("fk_PostID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("Tbl_VisitedPosts");
                });

            modelBuilder.Entity("radFB.db.Tbl_Voluntaryworks", b =>
                {
                    b.Property<long>("VoluntaryworkID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("VoluntaryworkTitle");

                    b.Property<long>("fk_userID");

                    b.HasKey("VoluntaryworkID");

                    b.HasIndex("fk_userID");

                    b.ToTable("Tbl_Voluntaryworks");
                });

            modelBuilder.Entity("radFB.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<bool>("DeleteStatus");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("Fk_userAccessID");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("Tbl_userAccessuserAccessID");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserPic");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Tbl_userAccessuserAccessID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("radFB.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("radFB.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("radFB.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("radFB.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("radFB.db.Tbl_activeSesion", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_activeSesion")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_activities", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_activities")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_AnswerToQuestion", b =>
                {
                    b.HasOne("radFB.db.Tbl_AnswerToQuestion", "Tbl_AnswerToQuestion2")
                        .WithMany("Tbl_AnswerToQuestion1")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("radFB.db.Tbl_Question", "Tbl_Question")
                        .WithMany("Tbl_AnswerToQuestion")
                        .HasForeignKey("fk_QuestiontID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_AnswerToQuestion")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_awards", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_awards")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_BlockedUsers", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_BlockedUsers")
                        .HasForeignKey("Tbl_RadFBUsersRadFbUserID");

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_BlockedUsers1")
                        .HasForeignKey("fk_BlockedUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers2")
                        .WithMany("Tbl_BlockedUsers2")
                        .HasForeignKey("fk_BlockingUSerID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_calender", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_calender")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_CommentLike", b =>
                {
                    b.HasOne("radFB.db.Tbl_AnswerToQuestion", "Tbl_AnswerToQuestion")
                        .WithMany("Tbl_CommentLike")
                        .HasForeignKey("fk_AnswerToQuestionID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_CommentLike")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_criticsAndSuggestions", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_criticsAndSuggestions")
                        .HasForeignKey("fk_senderUserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_DeclarationOfReadiness", b =>
                {
                    b.HasOne("radFB.db.Tbl_questionnaire", "Tbl_questionnaire")
                        .WithMany("Tbl_DeclarationOfReadiness")
                        .HasForeignKey("fk_questionnaireID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_DeclarationOfReadiness")
                        .HasForeignKey("fk_volunteerUserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_EmploymentAdvApply", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_EmploymentAdvApply")
                        .HasForeignKey("fk_ApplicantUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_post", "Tbl_post")
                        .WithMany("Tbl_EmploymentAdvApply")
                        .HasForeignKey("fk_postID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_EmploymentAdvPost", b =>
                {
                    b.HasOne("radFB.db.Tbl_CooperationType", "Tbl_CooperationType")
                        .WithMany("Tbl_EmploymentAdvPost")
                        .HasForeignKey("fk_CooperationTypeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_post", "Tbl_post")
                        .WithMany("Tbl_EmploymentAdvPost")
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_countries", "Tbl_countries")
                        .WithMany("Tbl_EmploymentAdvPost")
                        .HasForeignKey("fk_countryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_gender", "Tbl_gender")
                        .WithMany("Tbl_EmploymentAdvPost")
                        .HasForeignKey("fk_genderID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_grade", "Tbl_grade")
                        .WithMany("Tbl_EmploymentAdvPost")
                        .HasForeignKey("fk_grageID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_jobCategory", "Tbl_jobCategory")
                        .WithMany("Tbl_EmploymentAdvPost")
                        .HasForeignKey("fk_jobCategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_militaryServiceSituation", "Tbl_militaryServiceSituation")
                        .WithMany("Tbl_EmploymentAdvPost")
                        .HasForeignKey("fk_mssID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_factor", b =>
                {
                    b.HasOne("radFB.db.Tbl_pay", "Tbl_pay")
                        .WithMany("Tbl_factor")
                        .HasForeignKey("fk_payID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_followers", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_followers")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_followers1")
                        .HasForeignKey("fk_followerUSerID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_FrequentlyAskedQuestions", b =>
                {
                    b.HasOne("radFB.db.Tbl_FrequentlyAskedQuestionsSubject", "Tbl_FrequentlyAskedQuestionsSubject")
                        .WithOne("Tbl_FrequentlyAskedQuestions")
                        .HasForeignKey("radFB.db.Tbl_FrequentlyAskedQuestions", "fk_SubjectID");
                });

            modelBuilder.Entity("radFB.db.Tbl_group", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_group")
                        .HasForeignKey("fk_creatorUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("radFB.db.Tbl_groupException", b =>
                {
                    b.HasOne("radFB.db.Tbl_group", "Tbl_group")
                        .WithMany("Tbl_groupException")
                        .HasForeignKey("fk_ExecptionGroupID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_groupException")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_groupMessages", b =>
                {
                    b.HasOne("radFB.db.Tbl_group", "Tbl_group")
                        .WithMany("Tbl_groupMessages")
                        .HasForeignKey("fk_groupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("radFB.db.Tbl_messageType", "Tbl_messageType")
                        .WithMany("Tbl_groupMessages")
                        .HasForeignKey("fk_messageTypeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_groupMessages")
                        .HasForeignKey("fk_senderUserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_jobCategory", b =>
                {
                    b.HasOne("radFB.db.Tbl_guild", "Tbl_guild")
                        .WithMany("Tbl_jobCategory")
                        .HasForeignKey("fk_guildID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("radFB.db.Tbl_keyWords", b =>
                {
                    b.HasOne("radFB.db.Tbl_post", "Tbl_post")
                        .WithMany("Tbl_keyWords")
                        .HasForeignKey("fk_postID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_legalClient", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_legalClient")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_Logins", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_Logins")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_memberOfGroup", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_memberOfGroup")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_group", "Tbl_group")
                        .WithMany("Tbl_memberOfGroup")
                        .HasForeignKey("fk_groupID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_messages", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_messages")
                        .HasForeignKey("fk_ReciverUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_messageType", "Tbl_messageType")
                        .WithMany("Tbl_messages")
                        .HasForeignKey("fk_messageTypeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_messages1")
                        .HasForeignKey("fk_senderUserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_messagesException", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_messagesException1")
                        .HasForeignKey("fk_ExecptionUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_messagesException")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_muteGroupMessage", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_muteGroupMessage")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_group", "Tbl_group")
                        .WithMany("Tbl_muteGroupMessage")
                        .HasForeignKey("fk_groupID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_muteMessages", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithOne("Tbl_muteMessages1")
                        .HasForeignKey("radFB.db.Tbl_muteMessages", "fk_ReciverUserID");

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_muteMessages")
                        .HasForeignKey("fk_senderUserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_MuteUsers", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_MuteUsers1")
                        .HasForeignKey("fk_MutedUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_MuteUsers")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_notifications", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_notifications")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_packageOptions", b =>
                {
                    b.HasOne("radFB.db.Tbl_permiumPackage", "Tbl_permiumPackage")
                        .WithMany("Tbl_packageOptions")
                        .HasForeignKey("fk_permiumPackageID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_setting", "Tbl_setting")
                        .WithMany("Tbl_packageOptions")
                        .HasForeignKey("fk_settingID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_pay", b =>
                {
                    b.HasOne("radFB.db.Tbl_permiumPackage", "Tbl_permiumPackage")
                        .WithMany("Tbl_pay")
                        .HasForeignKey("fk_permiumPackageID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_pay")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_pointsDetail", b =>
                {
                    b.HasOne("radFB.db.Tbl_points", "Tbl_points")
                        .WithMany("Tbl_pointsDetail")
                        .HasForeignKey("fk_pointID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_pointsDetail")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_post", b =>
                {
                    b.HasOne("radFB.db.postType", "postType")
                        .WithMany("Tbl_post")
                        .HasForeignKey("fk_PostTypeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_post")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_postChanged", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_postChanged")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_postChangedException", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_postChangedException1")
                        .HasForeignKey("fk_ExecptionUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_postChangedException")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_poster", b =>
                {
                    b.HasOne("radFB.db.Tbl_countries", "Tbl_countries")
                        .WithMany("Tbl_poster")
                        .HasForeignKey("fk_countryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_gender", "Tbl_gender")
                        .WithMany("Tbl_poster")
                        .HasForeignKey("fk_genderID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_posterTemplate", "Tbl_posterTemplate")
                        .WithMany("Tbl_poster")
                        .HasForeignKey("fk_posterTemplateID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_posterFilter", b =>
                {
                    b.HasOne("radFB.db.Tbl_countries", "Tbl_countries")
                        .WithMany("Tbl_posterFilter")
                        .HasForeignKey("fk_countryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_gender", "Tbl_gender")
                        .WithMany("Tbl_posterFilter")
                        .HasForeignKey("fk_genderID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_PostFile", b =>
                {
                    b.HasOne("radFB.db.Tbl_post", "Tbl_post")
                        .WithMany("Tbl_PostFile")
                        .HasForeignKey("fk_postID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_PostForward", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_PostForward")
                        .HasForeignKey("fk_ForwardedUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_PostForward1")
                        .HasForeignKey("fk_ForwardingUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_post", "Tbl_post")
                        .WithMany("Tbl_PostForward")
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_PostLike", b =>
                {
                    b.HasOne("radFB.db.Tbl_post", "Tbl_post")
                        .WithMany("Tbl_PostLike")
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_PostLike")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_privacy", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_privacy")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_province", b =>
                {
                    b.HasOne("radFB.db.Tbl_countries", "Tbl_countries")
                        .WithMany("Tbl_province")
                        .HasForeignKey("fk_countryID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_Question", b =>
                {
                    b.HasOne("radFB.db.Tbl_jobCategory", "Tbl_jobCategory")
                        .WithMany("Tbl_Question")
                        .HasForeignKey("fk_JobCategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_Question")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_post", "Tbl_post")
                        .WithMany("Tbl_Question")
                        .HasForeignKey("fk_postID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_questionFilter", b =>
                {
                    b.HasOne("radFB.db.Tbl_jobCategory", "Tbl_jobCategory")
                        .WithMany("Tbl_questionFilter")
                        .HasForeignKey("fk_JobCategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_subject", "Tbl_subject")
                        .WithMany("Tbl_questionFilter")
                        .HasForeignKey("fk_subjectID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_questionFilter")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_questionnaire", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_questionnaire")
                        .HasForeignKey("fk_ApplicantUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_jobCategory", "Tbl_jobCategory")
                        .WithMany("Tbl_questionnaire")
                        .HasForeignKey("fk_JobCategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_gender", "Tbl_gender")
                        .WithMany("Tbl_questionnaire")
                        .HasForeignKey("fk_genderID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_post", "Tbl_post")
                        .WithMany("Tbl_questionnaire")
                        .HasForeignKey("fk_postID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_questionnaireFilter", b =>
                {
                    b.HasOne("radFB.db.Tbl_subject", "Tbl_subject")
                        .WithMany("Tbl_questionnaireFilter")
                        .HasForeignKey("fk_subjectID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_questionnaireFilter")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_RadFBUsers", b =>
                {
                    b.HasOne("radFB.db.Tbl_countries", "Tbl_countries")
                        .WithMany("Tbl_RadFBUsers")
                        .HasForeignKey("fk_countryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_jobCategory", "Tbl_jobCategory")
                        .WithMany("Tbl_RadFBUsers")
                        .HasForeignKey("fk_jobCategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_userType", "Tbl_userType")
                        .WithMany("Tbl_RadFBUsers")
                        .HasForeignKey("fk_userTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_RealCient", b =>
                {
                    b.HasOne("radFB.db.Tbl_CooperationType", "Tbl_CooperationType")
                        .WithMany("Tbl_RealCient")
                        .HasForeignKey("fk_CooperationID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_gender", "Tbl_gender")
                        .WithMany("Tbl_RealCient")
                        .HasForeignKey("fk_GenderID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_RealCient")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_militaryServiceSituation", "Tbl_militaryServiceSituation")
                        .WithMany("Tbl_RealCient")
                        .HasForeignKey("fk_mssID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_reportUsers", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_reportUsers1")
                        .HasForeignKey("fk_ReportedUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_reportUsers")
                        .HasForeignKey("fk_ReportingUSerID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_savedQuestion", b =>
                {
                    b.HasOne("radFB.db.Tbl_Question", "Tbl_Question")
                        .WithMany("Tbl_savedQuestion")
                        .HasForeignKey("fk_QuestionID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_savedQuestion")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_savedQuestionnaire", b =>
                {
                    b.HasOne("radFB.db.Tbl_questionnaire", "Tbl_questionnaire")
                        .WithMany("Tbl_savedQuestionnaire")
                        .HasForeignKey("fk_QuestionnaireID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_savedQuestionnaire")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_savedTopics", b =>
                {
                    b.HasOne("radFB.db.Tbl_subject", "Tbl_subject")
                        .WithMany("Tbl_savedTopics")
                        .HasForeignKey("fk_subjectID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_savedTopics")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_silentUsers", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_silentUsers1")
                        .HasForeignKey("fk_silentUSerID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_silentUsers")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_story", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_story")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_storySeen", b =>
                {
                    b.HasOne("radFB.db.Tbl_story", "Tbl_story")
                        .WithMany("Tbl_storySeen")
                        .HasForeignKey("fk_storyID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_storySeen")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_SuggestionUsers", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_SuggestionUsers1")
                        .HasForeignKey("fk_SuggestedUSerID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_SuggestionUsers")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_userBackGroundSetting", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_userBackGroundSetting")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_userDiscount", b =>
                {
                    b.HasOne("radFB.db.Tbl_discount", "Tbl_discount")
                        .WithMany("Tbl_userDiscount")
                        .HasForeignKey("fk_discountID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_userDiscount")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_UserEducationalBackground", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_UserEducationalBackground")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_grade", "Tbl_grade")
                        .WithMany("Tbl_UserEducationalBackground")
                        .HasForeignKey("fk_gradeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_major", "Tbl_major")
                        .WithMany("Tbl_UserEducationalBackground")
                        .HasForeignKey("fk_majorID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_UserFavorites", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_UserFavorites")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_UserJobStatus", b =>
                {
                    b.HasOne("radFB.db.Tbl_jobStatus", "Tbl_jobStatus")
                        .WithMany("Tbl_UserJobStatus")
                        .HasForeignKey("fk_JobStatusID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_UserJobStatus")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_UserRegistrationCourses", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_UserRegistrationCourses")
                        .HasForeignKey("fk_RegisteredUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_poster", "Tbl_poster")
                        .WithMany("Tbl_UserRegistrationCourses")
                        .HasForeignKey("fk_posterID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_userSetting", b =>
                {
                    b.HasOne("radFB.db.Tbl_setting", "Tbl_setting")
                        .WithMany("Tbl_userSetting")
                        .HasForeignKey("fk_settingID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_userSetting")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_usersQuestions", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_usersQuestions")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_usersSearchs", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_usersSearchs")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_UsersSkills", b =>
                {
                    b.HasOne("radFB.db.Tbl_Skills", "Tbl_Skills")
                        .WithMany("Tbl_UsersSkills")
                        .HasForeignKey("fk_SkillID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_UsersSkills")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_UserWorkExperience", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_UserWorkExperience")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_UserWorkExperienceStamp", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_UserWorkExperienceStamp")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_UserWorkExperience", "Tbl_UserWorkExperience")
                        .WithMany("Tbl_UserWorkExperienceStamp")
                        .HasForeignKey("fk_UserWorkExperienceID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers1")
                        .WithMany("Tbl_UserWorkExperienceStamp1")
                        .HasForeignKey("fk_stampedUSerID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_VisitedPosts", b =>
                {
                    b.HasOne("radFB.db.Tbl_post", "Tbl_post")
                        .WithMany("Tbl_VisitedPosts")
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_VisitedPosts")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.db.Tbl_Voluntaryworks", b =>
                {
                    b.HasOne("radFB.db.Tbl_RadFBUsers", "Tbl_RadFBUsers")
                        .WithMany("Tbl_Voluntaryworks")
                        .HasForeignKey("fk_userID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("radFB.Models.ApplicationUser", b =>
                {
                    b.HasOne("radFB.db.Tbl_userAccess", "Tbl_userAccess")
                        .WithMany()
                        .HasForeignKey("Tbl_userAccessuserAccessID");
                });
#pragma warning restore 612, 618
        }
    }
}
